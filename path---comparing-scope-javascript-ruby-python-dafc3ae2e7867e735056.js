webpackJsonp([0x830237386a22],{512:function(n,a){n.exports={data:{markdownRemark:{html:'<p>I spend most of my time eating, drinking and breathing JavaScript. I\'m either reading and writing code and I\'ve made a habit of reading documentation whenever I\'m on the subway. However, I recently made a decision to spend a small amount of time refreshing my Ruby knowledge every day.</p>\n<p>I noticed some interesting differences in how each language handles scope. In Javascript, if a variable is declared and assigned in the global namespace it will be accessible to any child function.</p>\n<p>Take the following code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> vegetable <span class="token operator">=</span> <span class="token string">\'tomato\'</span>\n\n<span class="token keyword">function</span> <span class="token function">logVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vegetable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">logVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// console will log \'tomato\'</span>\ntomato\n</code></pre>\n      </div>\n<p>In Ruby scope is handled differently. A variable that is assigned in the global space will be out of scope for a method defined on the same level.</p>\n<p>Take the following code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code>vegetable <span class="token operator">=</span> <span class="token string">\'tomato\'</span>\n\n<span class="token keyword">def</span> print_vegetable\n  puts vegetable\n<span class="token keyword">end</span>\n\n<span class="token comment"># Calling print_vegetable will fail with an error due to the variable being out of scope</span>\nprint_vegetable\n\n<span class="token constant">NameError</span><span class="token punctuation">:</span> undefined local variable <span class="token keyword">or</span> method <span class="token string">\'vegetable\'</span> <span class="token keyword">for</span> main<span class="token symbol">:Object</span>\n</code></pre>\n      </div>\n<p>The method will only be able to access the variable if we pass it in as an argument:</p>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code>vegetable <span class="token operator">=</span> <span class="token string">\'tomato\'</span>\n\n<span class="token keyword">def</span> <span class="token function">print_vegetable</span><span class="token punctuation">(</span>vegetable<span class="token punctuation">)</span>\n  puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>vegetable<span class="token delimiter tag">}</span></span>"</span>\n<span class="token keyword">end</span>\n\n<span class="token function">print_vegetable</span><span class="token punctuation">(</span>vegetable<span class="token punctuation">)</span>\n<span class="token comment"># Now \'tomato\' will print</span>\n\ntomato\n</code></pre>\n      </div>\n<p>Another way to access variables outside the scope of a method is using instance and class variables. Simply prepend <code>@</code> or <code>@@</code> to the beginning of a variable declaration and the variable will be available inside the method. For example: <code>@vegetable = \'tomato\'</code>. However, it is important to understand best practices for using instance/class variables before using them.</p>\n<p>How do you think Python handles scope?</p>\n<p>Like Javascript, Python will know about the variable assigned in global space:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">5</span>\n\n<span class="token keyword">def</span> <span class="token function">math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment"># math() returns 8</span>\n<span class="token number">8</span>\n</code></pre>\n      </div>',frontmatter:{date:"January 09, 2018",path:"/comparing-scope-javascript-ruby-python",title:"Comparing Scope in Javascript, Ruby and Python"}}},pathContext:{}}}});
//# sourceMappingURL=path---comparing-scope-javascript-ruby-python-dafc3ae2e7867e735056.js.map